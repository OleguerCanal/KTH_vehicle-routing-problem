(define (domain airline)
    (:requirements :typing :fluents)
    (:types city people)

    (:predicates
                (plane-at ?x - city)
                (people-at ?p - people ?x - city)
                (people-want ?p - people ?y - city)
                (people-in-plane ?p - people)
                (people-just-unboarded ?p - people)
    )

    (:functions
                (add-distance ?x - city ?y - city)
                (people-number ?p -people)

                (total-distance)
                (time)
                (onboard)
                (seats)
                (happy-people)
    )

    (:action fly :parameters (?x - city ?y - city)
                 :precondition (plane-at ?x)
                 :effect (and (plane-at ?y)
                              (not (plane-at ?x))
                              (increase (total-distance) (add-distance ?x ?y))
                              (decrease (time) 1)
                         )
    )

    (:action board :parameters(?x - city ?p  -people)
                   :precondition (and (people-at ?p ?x)
                                      (plane-at ?x)
                                      (not (people-just-unboarded ?p))
                                      (>= (- (seats) (onboard)) (people-number ?p))
                                 )
                   :effect (and (increase (onboard) (people-number ?p))
                                (not (people-at ?p ?x))
                                (people-in-plane ?p)
                            )
    )


    (:action unboard :parameters(?x - city ?p  -people)
                   :precondition (and (people-in-plane ?p)
                                      (plane-at ?x)
                                 )
                   :effect (and (decrease (onboard) (people-number ?p))
                                (people-at ?p ?x)
                                (people-just-unboarded ?p)
                                (not (people-in-plane ?p))
                                (when (people-want ?p ?x)
                                    (increase (happy-people) (people-number ?p)))
                            )
    )

;    (:action board :parameters (?x - city)
;                   :precondition (and (plane-at ?x)
;                                      (> (- (seats) (onboard)) 0)
;                                      (> (people-at ?x) 0)
;                                 )
;                   :effect (and (when (> (people-at ?x) (- (seats) (onboard)))
;                                      (and (decrease () ()) ())
;                                )
;
;                           )
;    )
    
)
